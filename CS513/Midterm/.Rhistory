#Aidan Fischer
#11/7/2023
#CS513 Midterm - Questions 4-7
#I pledge my honor that I have abided by the Stevens Honor
rm(list=ls())
library(caTools)
library(class)
library(e1071)
library(caret)
data = read.csv("BP.csv")
data$F6 <- suppressWarnings(as.numeric(data$F6))
#Aidan Fischer
#11/7/2023
#CS513 Midterm - Questions 4-7
#I pledge my honor that I have abided by the Stevens Honor
rm(list=ls())
library(caTools)
library(class)
library(e1071)
library(caret)
data = read.csv("BP.csv")
data = data[complete.cases(data), ]
#Convert categories to the factor data type
#Maintain typo in given file for consistency
data$Somker <- factor(data$Somker,levels=c("1- Non-smoker","2- Light","3- Moderate","4- Heavy","5- Very Heavy"),labels=1:5,ordered=TRUE)
data$BP_Status <- factor(data$BP_Status, levels=c("Normal","High"),ordered=FALSE)
set.seed(255)
split = sample.split(data$Class, SplitRatio=0.7)
#Aidan Fischer
#11/7/2023
#CS513 Midterm - Questions 4-7
#I pledge my honor that I have abided by the Stevens Honor
rm(list=ls())
library(caTools)
library(class)
library(e1071)
library(caret)
data = read.csv("BP.csv")
data = data[complete.cases(data), ]
#Convert categories to the factor data type
#Maintain typo in given file for consistency
data$Somker <- factor(data$Somker,levels=c("1- Non-smoker","2- Light","3- Moderate","4- Heavy","5- Very Heavy"),labels=1:5,ordered=TRUE)
data$BP_Status <- factor(data$BP_Status, levels=c("Normal","High"),ordered=FALSE)
set.seed(255)
split = sample.split(data$BP_Status, SplitRatio=0.7)
train = subset(data, split == TRUE)
test = subset(data, split == FALSE)
head(train)
#Display box and pair plots for Age, Weight, Height
boxplot(data$Age)
boxplot(data$Age)
boxplot(data$Weight)
boxplot(data$Height)
#Display box and pair plots for Age, Weight, Height
boxplot.default(data$Age)
boxplot.default(data$Weight)
boxplot.default(data$Height)
pairs(data$Age,data$Weight)
pairs(c(data$Age,data$Weight,data$Height))
pairs(select(data,c("Age","Weight","Height"))
pairs(select(data,c("Age","Weight","Height")))
pairs(select(data,c("Age","Weight","Height")))
pairs(data[c("Age","Weight","Height")])
?rpart()
CART_class<-rpart(BP_Status~.,data=train)
library(rpart)
library(rpart.plot)
library(rattle)
library(RColorBrewer)
CART_class<-rpart(BP_Status~.,data=train)
rpart.plot(CART_class)
CART_test<-predict(CART_class,test, type="class")
CART_test_conf_mat<-as.matrix(table(Actual=test[,"BP_Status"],CART=CART_test))
CART_train<-predict(CART_class,train, type="class")
CART_train_conf_mat<-as.matrix(table(Actual=train[,"BP_Status"],CART=CART_train))
CART_class<-rpart(BP_Status~.,data=train,method="class",control=rpart.control())
rpart.plot(CART_class)
CART_class<-rpart(BP_Status~Smoker+Gender+Age+Height+Weight,data=train,method="class",control=rpart.control())
CART_class<-rpart(BP_Status~Somker+Gender+Age+Height+Weight,data=train,method="class",control=rpart.control())
rpart.plot(CART_class)
CART_test<-predict(CART_class,test, type="class")
#Display the first few rows of the training set
head(train)
CART_class<-rpart(BP_Status~Somker+Gender+Age+Height+Weight,data=train,method="class",control=rpart.control(minsplit=5))
rpart.plot(CART_class)
CART_class<-rpart(BP_Status~Somker+Gender+Age+Height+Weight,data=train,method="class",control=rpart.control(minsplit=5,cp=0.0001))
rpart.plot(CART_class)
CART_class<-rpart(BP_Status~Somker+Gender+Age+Height+Weight,data=train,method="class",control=rpart.control(minsplit=5,cp=0.001))
rpart.plot(CART_class)
CART_class<-rpart(BP_Status~Somker+Gender+Age+Height+Weight,data=train,method="class",control=rpart.control(minsplit=5,cp=0.005))
rpart.plot(CART_class)
CART_class<-rpart(BP_Status~Somker+Gender+Age+Weight,data=train,method="class",control=rpart.control(minsplit=5,cp=0.005))
rpart.plot(CART_class)
CART_class<-rpart(BP_Status~Somker+Gender+Weight,data=train,method="class",control=rpart.control(minsplit=5,cp=0.005))
rpart.plot(CART_class)
CART_class<-rpart(BP_Status~Somker+Gender,data=train,method="class",control=rpart.control(minsplit=5,cp=0.005))
rpart.plot(CART_class)
CART_class<-rpart(BP_Status~Somker+Gender+Age+Height+Weight,data=train,method="class",control=rpart.control(minsplit=5,cp=0.001))
rpart.plot(CART_class)
CART_test<-predict(CART_class,test, type="class")
CART_test<-predict(CART_class,test, type="class")
CART_test_conf_mat<-as.matrix(table(Actual=test[,"BP_Status"],CART=CART_test))
CART_train<-predict(CART_class,train, type="class")
CART_train_conf_mat<-as.matrix(table(Actual=train[,"BP_Status"],CART=CART_train))
CART_class<-rpart(BP_Status~Somker+Gender+Age+Height+Weight,data=train,method="class",control=rpart.control(minsplit=5,cp=0.0001))
CART_test<-predict(CART_class,test, type="class")
CART_test_conf_mat<-as.matrix(table(Actual=test[,"BP_Status"],CART=CART_test))
CART_train<-predict(CART_class,train, type="class")
CART_train_conf_mat<-as.matrix(table(Actual=train[,"BP_Status"],CART=CART_train))
CART_class<-rpart(BP_Status~Somker+Gender+Age+Height+Weight,data=train,method="class",control=rpart.control(minsplit=5,cp=0.005))
CART_class<-rpart(BP_Status~Somker+Gender+Age+Height+Weight,data=train,method="class",control=rpart.control(minsplit=2,cp=0.005))
rpart.plot(CART_class)
CART_test<-predict(CART_class,test, type="class")
CART_test_conf_mat<-as.matrix(table(Actual=test[,"BP_Status"],CART=CART_test))
CART_train<-predict(CART_class,train, type="class")
CART_train_conf_mat<-as.matrix(table(Actual=train[,"BP_Status"],CART=CART_train))
CART_class<-rpart(BP_Status~Somker+Gender+Age+Height+Weight,data=train,method="class",control=rpart.control(minsplit=2,cp=0.01,xval=100))
#Display the first few rows of the training set
head(train)
CART_class<-rpart(BP_Status~Somker+Gender+Age+Height+Weight,data=train,method="class",control=rpart.control(minsplit=2,cp=0.01,xval=100))
rpart.plot(CART_class)
CART_class<-rpart(BP_Status~Somker+Gender+Age+Height+Weight,data=train,method="class",control=rpart.control(minsplit=2,cp=0.01,xval=10000))
rpart.plot(CART_class)
CART_class<-rpart(BP_Status~Somker+Gender+Age+Height+Weight,data=train,method="class",control=rpart.control(minsplit=0,cp=0.007,xval=1000))
rpart.plot(CART_class)
CART_test<-predict(CART_class,test, type="class")
CART_test_conf_mat<-as.matrix(table(Actual=test[,"BP_Status"],CART=CART_test))
CART_train<-predict(CART_class,train, type="class")
CART_train_conf_mat<-as.matrix(table(Actual=train[,"BP_Status"],CART=CART_train))
"a"+"b"
concat("a","b")
"a"."b"
printMetrics(CART_test_conf_mat, "CART test")
printMetrics <- function(conf_mat, purpose) {
TP=conf_mat[2,2]
TN=conf_mat[1,1]
FP=conf_mat[1,2]
FN=conf_mat[2,1]
accuracy = (TP+TN)/(TP+TN+FP+FN);   print(paste("Accuracy of ",purpose,": ", accuracy))
recall<-TP/(TP+FN);   print(paste("Recall of ",purpose,": ", recall))
f1<- 2*(precision*recall)/(precision+recall); print(paste("F1 of ",purpose,": ", f1))
}
printMetrics(CART_test_conf_mat, "CART test")
printMetrics <- function(conf_mat, purpose) {
TP=conf_mat[2,2]
TN=conf_mat[1,1]
FP=conf_mat[1,2]
FN=conf_mat[2,1]
accuracy = (TP+TN)/(TP+TN+FP+FN);   print(paste("Accuracy of ",purpose,": ", accuracy))
recall<-TP/(TP+FN);   print(paste("Recall of ",purpose,": ", recall))
precision<- TP/(TP+FP)
f1<- 2*(precision*recall)/(precision+recall); print(paste("F1 of ",purpose,": ", f1))
}
printMetrics(CART_test_conf_mat, "CART test")
printMetrics <- function(conf_mat, purpose) {
TP=conf_mat[2,2]
TN=conf_mat[1,1]
FP=conf_mat[1,2]
FN=conf_mat[2,1]
accuracy = (TP+TN)/(TP+TN+FP+FN);   print(paste("Accuracy of",purpose,":", accuracy))
recall<-TP/(TP+FN);   print(paste("Recall of",purpose,":", recall))
precision<- TP/(TP+FP)
f1<- 2*(precision*recall)/(precision+recall); print(paste("F1 of",purpose,":", f1))
}
printMetrics(CART_test_conf_mat, "CART test")
printMetrics(CART_train_conf_mat, "CART train")
?naiveBayes()
#Naive Bayes
NB_Class<-naiveBayes(BP_Status~.,data=train)
NB_test<-predict(NB_class,test, type="class")
NB_Class
NB_test<-predict(NB_class,test)
#Naive Bayes
NB_Class<-naiveBayes(BP_Status~.,data=train)
NB_test<-predict(NB_class,test)
#Naive Bayes
NB_class<-naiveBayes(BP_Status~.,data=train)
NB_test<-predict(NB_class,test)
NB_test_conf_mat<-as.matrix(table(Actual=test[,"BP_Status"],NB=NB_test))
NB_train<-predict(NB_class,train)
NB_train_conf_mat<-as.matrix(table(Actual=train[,"BP_Status"],NB=NB_train))
print(NB_test_conf_mat)
printMetrics(NB_test_conf_mat, "Naive Bayes test")
print(NB_train_conf_mat)
printMetrics(NB_train_conf_mat, "Naive Bayes train")
for(k in c(2,5,1)){print(k)}
?knn()
?trainControl
#KNN
KNN_class<-train(BP_Status~.,data=train,method="knn",preProcess=c("center","scale"))
print(KNN_class)
#KNN
KNN_class<-train(BP_Status~.,data=train,method="knn",preProcess=c("center","scale"),tuneLength=20)
print(KNN_class)
?train()
#KNN
KNN_class<-train(BP_Status~.,data=train,method="knn",preProcess=c("center","scale"),tuneLength=10)
print(KNN_class)
print(NB_class)
KNN_test<-predict(KNN_class,test)
KNN_test_conf_mat<-as.matrix(table(Actual=test[,"BP_Status"],KNN=KNN_test))
KNN_train<-predict(KNN_class,train)
KNN_train_conf_mat<-as.matrix(table(Actual=train[,"BP_Status"],KNN=KNN_train))
print(KNN_test_conf_mat)
printMetrics(NB_test_conf_mat, "KNN test")
print(KNN_train_conf_mat)
printMetrics(KNN_train_conf_mat, "KNN train")
